#version 450

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0, rgba8) uniform readonly image2D t_input;
layout(set = 1, binding = 1, rgba8) uniform writeonly image2D t_output;

#include "special_fx.glsl"
#include "lens_fx.glsl"
#include "tone_mapping.glsl"

void main()
{
    const ivec2 resolution = imageSize(t_output);
    const vec2 uv = (vec2(gl_GlobalInvocationID.xy + 0.5f) / resolution);

    //ImageData data = GetNeighbours();
    //vec3 rgb = Sharpen(data);
    vec3 rgb = imageLoad(t_input, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)).rgb;
    //vec3 rgb = ChromaticAberration(uv, 0.4, 0.95f, resolution);

    const float gamma = 2.2;
    const float exposure = 1.5;

    rgb = ExposureCorrect(rgb, exposure);
    rgb = ACESFittedHighQuality(rgb);
    rgb = GammaCorrect(rgb, gamma);

    rgb = Vignette(rgb, uv, 1.5, 0.5, 0.5);

    imageStore(t_output, ivec2(gl_GlobalInvocationID.xy), vec4(rgb, 1));
}
