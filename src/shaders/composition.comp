#version 450

#define SCATTER
#define COMPOSITION

#define POINT_LIGHT 0
#define DIRECTIONAL_LIGHT 1
#define SPOT_LIGHT 2

#ifdef NORMAL_FILTERING
#extension GL_NV_compute_shader_derivatives : enable
#endif


layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 1, binding = 1, rgba8) uniform readonly image2D ts_gbuffers[5];
layout(set = 2, binding = 2, rgba8) uniform writeonly image2D t_output;
layout(set = 4, binding = 4) uniform samplerCube t_skybox;
layout(set = 5, binding = 5) uniform samplerCube t_irradiance;
layout(set = 6, binding = 6) uniform samplerCube t_environment;
layout(set = 7, binding = 7) uniform sampler2D t_brdf_lut;

#define ENV_SAMPLING
#include "pbr+_util.glsl"
#include "fog.glsl"
#include "structs.glsl"

layout(set = 0, binding = 0) uniform UniformBufferCameraObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 3, binding = 3) uniform UniformBufferLightObject {
    Light lights[25];
} lights;

#include "lighting.glsl"

vec3 GetReflectionVec(vec3 N, vec3 V, float roughness, float anisotropy, vec3 anisotropic_t, vec3 anisotropic_b)
{
#ifdef ANISO
	vec3 anisotropy_dir = anisotropy >= 0.0 ? anisotropic_b : anisotropic_t;
    vec3 anisotropicT = cross(anisotropy_dir, V);
    vec3 anisotropic_N = cross(anisotropicT, anisotropy_dir);
    float bend_factor = abs(anisotropy) * clamp(5.0 * roughness, 0, 1);
    vec3 bend_normal = normalize(mix(N, anisotropic_N, bend_factor));
    vec3 R = reflect(-V, bend_normal);
#else
	vec3 R = reflect(-V, N);
#endif

	return R;
}

vec2 DecodeMaterialProperties(float enc)
{
    const float x = float(int(enc) & 0xFF) / 200.f;
	const float y = float((int(enc) >> 8)) / 200.f;
	return vec2(x, y);
}

float NormalFiltering(float perceptual_roughness, vec3 normal, vec3 delta_u, vec3 delta_v) {
    // Tokuyoshi and Kaplanyan 2019, "Improved Geometric Specular Antialiasing"
	float mat_variance = 0.2;
	float mat_threshold = 0.1;

    float variance = mat_variance * (dot(delta_u, delta_u) + dot(delta_v, delta_v));

    float roughness = perceptual_roughness * perceptual_roughness;
    float kernel_roughness = min(2.0 * variance, mat_threshold);
    float square_roughness = clamp(roughness * roughness + kernel_roughness, 0, 1);

    return sqrt(sqrt(square_roughness));
}

void main()
{
    const ivec2 resolution = imageSize(t_output);
    const vec2 uv = (vec2(gl_GlobalInvocationID.xy + 0.5f) / resolution);
    const ivec2 s_uv = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

    // GBuffers
    const vec4 albedo_roughness = imageLoad(ts_gbuffers[0], s_uv);
    const vec4 normal_metallic = imageLoad(ts_gbuffers[1], s_uv);
    const vec4 world_pos_ao = imageLoad(ts_gbuffers[2], s_uv);
    const vec4 reflectivity_anisotropy = imageLoad(ts_gbuffers[3], s_uv);
	const vec4 anisotropyt_geomnormal = imageLoad(ts_gbuffers[4], s_uv);
    const vec3 world_pos = world_pos_ao.xyz;
    const vec3 albedo = albedo_roughness.rgb;
    vec3 N = normal_metallic.xyz;
	vec3 geometric_normal = vec3(anisotropyt_geomnormal.gba);

	// Anisotropy
	const vec2 decoded_refl_aniso = DecodeMaterialProperties(reflectivity_anisotropy.r);
    const float reflectivity = decoded_refl_aniso.x;
	const float anisotropy = decoded_refl_aniso.y;
	const vec3 anisotropic_t = vec3(reflectivity_anisotropy.ba, anisotropyt_geomnormal.r);
	const vec3 anisotropic_b = normalize(cross(geometric_normal, anisotropic_t));

	// Clear Coat
	const vec2 decoded_cc_ccr = DecodeMaterialProperties(reflectivity_anisotropy.g);
	float clear_coat = decoded_cc_ccr.x;
	float cc_roughness = clamp(decoded_cc_ccr.y, MIN_PERCEPTUAL_ROUGHNESS, 1.0);

	// Subsurface
	const vec2 decoded_ao_thick = DecodeMaterialProperties(world_pos_ao.a);
	const float ao = decoded_ao_thick.r;
	vec3 subsurface_color = vec3(24 / 255.f, 69 / 255.f, 0);
	float subsurface_power = 0;
	float thickness = decoded_ao_thick.g;

    float roughness = clamp(albedo_roughness.a, MIN_PERCEPTUAL_ROUGHNESS, 1.f);
    float metallic = normal_metallic.a;

    mat4 inv_view = inverse(camera.view);

#ifdef NORMAL_FILTERING
    vec3 delta_u = dFdx(geometric_normal);
    vec3 delta_v = dFdy(geometric_normal);
	roughness = NormalFiltering(roughness, geometric_normal, delta_u, delta_v);
	cc_roughness = NormalFiltering(cc_roughness, geometric_normal, delta_u, delta_v);
#endif

    // Constants
    const vec3 irradiance = texture(t_irradiance, vec3(N.x, N.y * -1, N.z)).rgb;
    const vec3 view_pos = vec3(inv_view[3]);

    vec3 V = normalize(view_pos - world_pos);

	float NdotV = max(dot(N, V), MIN_N_DOT_V);
    vec2 dfg = texture(t_brdf_lut, vec2(NdotV, roughness)).gr; // lut

    vec3 diffuse_color = ComputeDiffuseColor(albedo, metallic);

    float reflectance = ComputeDielectricF0(reflectivity); // TODO: proper material reflectance
    vec3 F0 = ComputeF0(albedo, metallic, reflectance);
    vec3 energy_compensation = 1.0 + F0 * (1.0 / dfg.y - 1.0);

    float diff_ao = ao;
    float spec_ao = ComputeSpecularAO(NdotV, diff_ao, PerceptualRoughnessToRoughness(roughness)); // TODO: Specular ao

    // specular layer
	vec3 R = GetReflectionVec(N, V, roughness, anisotropy, anisotropic_t, anisotropic_b);
    vec3 E = SpecularDFG(F0, dfg);
    vec3 spec = E * GetEnvReflection(R, roughness);
    spec *= SingleBounceAO(spec_ao) * energy_compensation;

    // diffuse layer
    float diff_brdf = SingleBounceAO(diff_ao); // Fd_Lambert() is baked in the SH below
    vec3 diff_irradiance = irradiance;
    vec3 diff = diffuse_color * diff_irradiance * (1.0 - E) * diff_brdf;

#ifdef CLEAR_COAT
#ifdef ANISO
	R = GetReflectionVec(N, V, roughness, 0, anisotropic_t, anisotropic_b);
#endif
    // clear coat layer
    EvaluateClearCoatIBL(clear_coat, cc_roughness, NdotV, R, spec_ao, diff, spec);
#endif

#ifdef SCATTER
	// subsurface layer
	EvaluateSubsurfaceIBL(V, diff_irradiance, roughness, subsurface_color, thickness, diff, spec);
#endif

    // extra ambient occlusion term
    MultiBounceAO(diff_ao, diffuse_color, diff);
    MultiBounceSpecularAO(spec_ao, F0, spec);

    float ibl_luminance = 1; // TODO figure this IBLluminance out.

    vec3 ibl_color = (diff + spec) * ibl_luminance;

    //uint num_lights = 1; //Light count is stored in 30 upper-bits of first light
	uint num_lights = lights.lights[0].m_type >> 2;
    vec3 lighting = vec3(0);
    for (uint i = 0; i < num_lights; i++)
    {
		lighting += ShadeLight(lights.lights[i], world_pos, N, geometric_normal, V, roughness, diffuse_color, metallic, thickness, clear_coat, cc_roughness, subsurface_power, subsurface_color, anisotropy, anisotropic_t, anisotropic_b, F0, energy_compensation);
    }

    vec3 color = ibl_color + lighting;

    // Skybox
    if (world_pos.z == 0)
    {
        vec2 d = uv * 2.0f - 1.0;

        vec4 target = inverse(camera.proj) * vec4(d.x, d.y, 1, 1) ;
        vec4 direction = inv_view * vec4(normalize(target.xyz), 0);

        color = textureLod(t_skybox, direction.xyz, 0).rgb;
    }

	// fog
	/*vec3 fog_color = vec3(0.5, 0.5, 0.5);
	float fog_dist = length((camera.proj * camera.view * vec4(world_pos.xyz, 1)).xyz);
	float fog_amount = FogFactorLinear(fog_dist, 5, 12);
	color = mix(color, fog_color, fog_amount);*/

	/*const vec2 buv = (vec2(gl_GlobalInvocationID.xy) / resolution.y);
    if (uv.x < 0.5) {
		color = vec3(texture(t_brdf_lut, buv).rg, 0);
    }*/

    imageStore(t_output, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1));
}
