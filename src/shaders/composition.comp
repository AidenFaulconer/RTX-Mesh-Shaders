#version 450

#include "pbr_util.glsl"

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 1, binding = 1, rgba8) uniform readonly image2D ts_gbuffers[3];
layout(set = 2, binding = 2, rgba8) uniform writeonly image2D t_output;
layout(set = 4, binding = 4) uniform samplerCube t_skybox;
layout(set = 5, binding = 5) uniform samplerCube t_irradiance;
layout(set = 6, binding = 6) uniform samplerCube t_environment;

layout(set = 0, binding = 0) uniform UniformBufferCameraObject {
    mat4 view;
    mat4 proj;
} camera;

struct Light
{
    vec3 m_pos;
    float m_radius;

    vec3 m_color;
    uint m_type;
};

layout(set = 3, binding = 3) uniform UniformBufferLightObject {
    Light lights[50];
} lights;

vec3 GetEnvReflection(vec3 R, float roughness)
{
    const float MAX_REFLECTION_LOD = 5.0;
    float lod = roughness * MAX_REFLECTION_LOD;
    return textureLod(t_environment, R, roughness).rgb;
}

void main()
{
    const ivec2 resolution = imageSize(t_output);
    const vec2 uv = (vec2(gl_GlobalInvocationID.xy + 0.5f) / resolution);
    const ivec2 s_uv = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

    // GBuffers
    const vec4 albedo_roughness = imageLoad(ts_gbuffers[0], s_uv);
    const vec4 normal_metallic = imageLoad(ts_gbuffers[1], s_uv);
    const vec4 world_pos_ao = imageLoad(ts_gbuffers[2], s_uv);

    const vec3 world_pos = world_pos_ao.xyz;
    const vec3 albedo = albedo_roughness.rgb;
    const vec3 N = normal_metallic.xyz;
    float roughness = albedo_roughness.a;
    float metallic = normal_metallic.a;
    const float ao = world_pos_ao.a;

    mat4 inv_view = inverse(camera.view);

    if (world_pos.z == 0)
    {
        vec2 d = uv * 2.0f - 1.0;

        vec4 target = inverse(camera.proj) * vec4(d.x, d.y, 1, 1) ;
        vec4 direction = inv_view * vec4(normalize(target.xyz), 0);

        imageStore(t_output, ivec2(gl_GlobalInvocationID.xy), textureLod(t_skybox, direction.xyz, 0));
        return;
    }

    // Constants
    const vec3 irradiance = texture(t_irradiance, vec3(N.x, N.y * -1, N.z)).rgb;
    const vec3 view_pos = vec3(inv_view[3][0], inv_view[3][1], inv_view[3][2]);

    vec3 V = normalize(view_pos - world_pos);
    vec3 R = reflect(-V, N);

    uint num_lights = 3; //Light count is stored in 30 upper-bits of first light

    vec3 lighting = vec3(0);
    for (uint i = 0; i < num_lights; i++)
    {
        const vec3 light_color = lights.lights[i].m_color;
        const vec3 light_pos = lights.lights[i].m_pos;

        vec3 L = normalize(light_pos - world_pos);
        lighting += BRDF(L, V, N, metallic, roughness, albedo, light_color);
    }

    vec3 diffuse = irradiance * albedo;
    vec3 F = F_SchlickRoughness(max(dot(N, V), 0.0), metallic, albedo, roughness);
    vec3 reflection = GetEnvReflection(R, roughness);
    vec3 specular = reflection * (F);

    vec3 kD = 1.0 - F;
    kD *= 1.0 - metallic;
    vec3 color = (kD * diffuse + specular) + lighting;

    color *= ao;

    imageStore(t_output, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1));
}
