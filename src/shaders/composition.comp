#version 450

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 1, binding = 1) uniform sampler2D ts_gbuffers[3];
layout(set = 2, binding = 2, rgba8) uniform image2D t_output;

void main()
{
    const ivec2 resolution = imageSize(t_output);
    const vec2 uv = (vec2(gl_GlobalInvocationID.xy + 0.5f) / resolution);

    // GBuffers
    const vec3 albedo = texture(ts_gbuffers[0], uv).rgb;
    const vec3 normal = texture(ts_gbuffers[1], uv).rgb;
    const vec3 world_pos = texture(ts_gbuffers[2], uv).xyz;

    // Constants
    const float specular_strength = 0.5;
    const float ambient = 0.1;
    const vec3 light_color = vec3(1);
    const vec3 view_pos = vec3(0, 0, -2.5);
    const vec3 light_pos = view_pos;

    // Diffuse
    vec3 norm = normalize(normal);
    vec3 light_dir = normalize(light_pos - world_pos);
    float diff = max(dot(norm, light_dir), 0.0);
    vec3 diffuse = diff * light_color;

    // Specular
    vec3 view_dir = normalize(view_pos - world_pos);
    vec3 reflect_dir = reflect(-light_dir, norm);
    float spec = pow(max(dot(view_dir, reflect_dir), 0.0), 32);
    vec3 specular = specular_strength * spec * light_color;

    vec3 color = (ambient + diffuse + specular) * albedo;

    if (world_pos.z == 0)
    {
        color = vec3(33, 27, 21) / 255.f;
    }

    imageStore(t_output, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1));
}
