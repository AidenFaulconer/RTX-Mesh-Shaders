#version 450
#pragma shader_stage(mesh)

//#define SHOW_MESHLETS

#define DISPLACEMENT

#ifdef DISPLACEMENT
	layout(set = 2, binding = 2) uniform sampler2D ts_textures[5];
#endif

#define USE_NATIVE   1
#extension GL_NV_mesh_shader : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : enable
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_vote : require

#define GROUP_SIZE 32
#define NVMESHLET_VERTEX_COUNT      64
#define NVMESHLET_PRIMITIVE_COUNT   126	
#define NVMESHLET_PRIM_ALIGNMENT        32
#define NVMESHLET_VERTEX_ALIGNMENT      16

#define NVMSH_INDEX_BITS      8
#define NVMSH_PACKED4X8_GET(packed, idx)   (((packed) >> (NVMSH_INDEX_BITS * (idx))) & 255)

layout(local_size_x=GROUP_SIZE) in;
layout(max_vertices=NVMESHLET_VERTEX_COUNT, max_primitives=NVMESHLET_PRIMITIVE_COUNT) out;
layout(triangles) out;

layout(location = 0) out vec2 g_uv[];
layout(location = 1) out vec3 g_normal[];
layout(location = 2) out vec3 g_frag_pos[];
layout(location = 3) out vec3 g_tangent[];
layout(location = 4) out vec3 g_bitangent[];
#ifdef SHOW_MESHLETS
layout(location = 5) out flat int g_meshlet_id[];
#endif

struct Vertex
{
	float x;
	float y;
	float z;

	float u;
	float v;
	
	float nx;
	float ny;
	float nz;

	float tx;
	float ty;
	float tz;

	float bx;
	float by;
	float bz;
};

struct ReadableVertex
{
	vec3 pos;
	vec2 uv;
	vec3 normal;
	vec3 tangent;
	vec3 bitangent;
};

layout(set = 1, binding = 1) uniform UniformBufferObject {
    mat4 model[100];
} ubo;

layout(set = 0, binding = 0) uniform UniformBufferCameraObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 4, binding = 4) buffer VertexBufferObj {
	Vertex vertices[];
} vb;

layout(set = 5, binding = 5) buffer IndexBufferObj {
	uint indices[];
} ib;

layout(set = 6, binding = 6) buffer MeshletBufferObj {
	uvec4 meshlet_descs[];
} mb;

void DecodeMeshlet(uvec4 meshlet_desc, out uint vert_max, out uint prim_max, out uint vert_begin, out uint prim_begin)
{
	vert_begin = (meshlet_desc.z & 0xFFFFF) * NVMESHLET_VERTEX_ALIGNMENT;
	prim_begin = (meshlet_desc.w & 0xFFFFF) /** NVMESHLET_PRIM_ALIGNMENT*/;
	vert_max = (meshlet_desc.x >> 24);
	prim_max = (meshlet_desc.y >> 24);
}

taskNV in Task {
	uint base_id;
	uint instance_id;
	uint8_t sub_ids[GROUP_SIZE];
	uint num_meshlets;
} IN;

void EmitVertex(uint idx, ReadableVertex vertex)
{
	mat4 model = ubo.model[IN.instance_id];

	vec4 world_pos = model * vec4(vertex.pos, 1.0f);
	vec4 world_normal = normalize(model * vec4(vertex.normal, 0));

	g_frag_pos[idx] = vec3(world_pos);
	g_normal[idx] = world_normal.xyz;
	g_tangent[idx] = normalize(model * vec4(vertex.tangent, 0)).xyz;
	g_bitangent[idx] = normalize(model * vec4(vertex.bitangent, 0)).xyz;
	g_uv[idx] = vertex.uv;
	g_uv[idx].y *= -1;
#ifdef SHOW_MESHLETS
	g_meshlet_id[idx] = meshlet_id;
#endif

	gl_MeshVerticesNV[idx].gl_Position = camera.proj * camera.view * world_pos;
}

void PushTriangle(inout uint start_idx, ReadableVertex a, ReadableVertex b, ReadableVertex c)
{
	gl_PrimitiveIndicesNV[start_idx+0] = start_idx+0;
	gl_PrimitiveIndicesNV[start_idx+1] = start_idx+1;
	gl_PrimitiveIndicesNV[start_idx+2] = start_idx+2;

	EmitVertex(start_idx+0, a);
	EmitVertex(start_idx+1, b);
	EmitVertex(start_idx+2, c);
}

ReadableVertex VertexToReadable(Vertex vertex)
{
	ReadableVertex retval;
	retval.pos = vec3(vertex.x, vertex.y, vertex.z);
	retval.uv = vec2(vertex.u, vertex.v);
	retval.normal = vec3(vertex.nx, vertex.ny, vertex.nz);
	retval.tangent = vec3(vertex.tx, vertex.ty, vertex.tz);
	retval.bitangent = vec3(vertex.bx, vertex.by, vertex.bz);

	return retval;
}

void main()
{
	//int meshlet_id = int((IN.base_id + IN.sub_ids[gl_WorkGroupID.x]) % IN.num_meshlets);
	int meshlet_id = 0;

	uvec4 meshlet_desc = mb.meshlet_descs[meshlet_id];
	uint vert_max;
	uint prim_max;
	uint vert_begin;
	uint prim_begin;
	DecodeMeshlet(meshlet_desc, vert_max, prim_max, vert_begin, prim_begin);
	vert_max += 1;
	prim_max += 1;
	
	// primitives
	uint next_index = 0;
	for (uint i = prim_begin * 3; i < (prim_begin + prim_max) * 3; i += 3)
	{
		uint k = i - (prim_begin * 3);

		//ReadableVertex v0 = VertexToReadable(vb.vertices[ib.indices[i + 0]]);
		//ReadableVertex v1 = VertexToReadable(vb.vertices[ib.indices[i + 1]]);
		//ReadableVertex v2 = VertexToReadable(vb.vertices[ib.indices[i + 2]]);

		gl_PrimitiveIndicesNV[k+0] = ib.indices[k + 0];
		gl_PrimitiveIndicesNV[k+1] = ib.indices[k + 1];
		gl_PrimitiveIndicesNV[k+2] = ib.indices[k + 2];
	}

	for (uint i = vert_begin; i < vert_begin + vert_max; i++)
	{
		uint k = i - (vert_begin);

		ReadableVertex v0 = VertexToReadable(vb.vertices[i]);
		EmitVertex(i, v0);
	}

	gl_PrimitiveCountNV = prim_max;
}
