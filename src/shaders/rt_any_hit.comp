#version 460
#extension GL_NV_ray_tracing : require
#pragma shader_stage(anyhit)

#include "random.glsl"
#include "structs.glsl"
#include "fog.glsl"

hitAttributeNV vec3 attribs;

layout(set = 4, binding = 4) buffer VertexBufferObj {
	Vertex vertices[];
} vb;

layout(set = 5, binding = 5) buffer IndexBufferObj {
	uint indices[];
} ib;

layout(set = 6, binding = 6) buffer UniformBufferOffsetObject
{ 
    RaytracingOffset offsets[];
} offsets;

layout(set = 7, binding = 7) buffer UniformBufferMaterialObject
{ 
    RaytracingMaterial materials[];
} materials;

layout(set = 8, binding = 8) uniform sampler2D ts_textures[100];

ReadableVertex VertexToReadable(Vertex vertex)
{
	ReadableVertex retval;
	retval.pos = vec3(vertex.x, vertex.y, vertex.z);
	retval.uv = vec2(vertex.u, vertex.v);
	retval.normal = vec3(vertex.nx, vertex.ny, vertex.nz);
	retval.tangent = vec3(vertex.tx, vertex.ty, vertex.tz);
	retval.bitangent = vec3(vertex.bx, vertex.by, vertex.bz);

	return retval;
}

vec3 HitAttribute(vec3 a, vec3 b, vec3 c, vec3 bary)
{
	vec3 vertexAttribute[3];
	vertexAttribute[0] = a;
	vertexAttribute[1] = b;
	vertexAttribute[2] = c;

	return vertexAttribute[0] +
		bary.x * (vertexAttribute[1] - vertexAttribute[0]) +
		bary.y * (vertexAttribute[2] - vertexAttribute[0]);
}

vec3 HitWorldPosition()
{
	return gl_WorldRayOriginNV + gl_WorldRayDirectionNV * gl_HitTNV;
}

layout(location = 0) rayPayloadInNV Payload payload;
layout(location = 1) rayPayloadNV bool shadow_payload;

void main()
{
	RaytracingOffset offset = offsets.offsets[gl_InstanceCustomIndexNV];
	const uint vertex_offset = offset.vertex_offset / 56;
	const uint index_offset = offset.idx_offset / 4;

	const uint triangle_stride = 3;
	uint base_idx = gl_PrimitiveID * triangle_stride;
	base_idx += index_offset;

	vec3 world_pos = HitWorldPosition();

	uvec3 indices = uvec3(ib.indices[base_idx+0], ib.indices[base_idx+1], ib.indices[base_idx+2]);
	indices += uvec3(vertex_offset, vertex_offset, vertex_offset); // offset the start

	const ReadableVertex v0 = VertexToReadable(vb.vertices[indices.x]);
	const ReadableVertex v1 = VertexToReadable(vb.vertices[indices.y]);
	const ReadableVertex v2 = VertexToReadable(vb.vertices[indices.z]);

	// Raytracing Material
	RaytracingMaterial material = materials.materials[gl_InstanceCustomIndexNV];

	vec2 uv = HitAttribute(vec3(v0.uv, 0), vec3(v1.uv, 0), vec3(v2.uv, 0), attribs).xy;
	uv.x *= material.u_scale;
	uv.y *= material.v_scale;
	uv.y = 1.0f - uv.y;

	vec4 albedo = texture(ts_textures[material.albedo_texture], uv).rgba;

	if (albedo.a < 0.5)
	{
		ignoreIntersectionNV();
	}
}
