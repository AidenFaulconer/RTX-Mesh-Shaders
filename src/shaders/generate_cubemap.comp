#version 450

layout (local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform sampler2D t_input;
layout(set = 1, binding = 1, rgba8) uniform writeonly imageCube t_output;

vec2 SampleSphericalMap(vec3 v)
{
    vec2 inv_atan = vec2(0.1591f, 0.3183f);

    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
    uv *= inv_atan;
    uv += 0.5f;

    return uv;
}

mat4 perspective(float fovy, float aspect, float zNear, float zFar)
{
    float rad = fovy;
    float tanHalfFovy = tan(rad / 2.f);

    mat4 result = mat4(0);
    result[0][0] = 1.f / (aspect * tanHalfFovy);
    result[1][1] = 1.f / (tanHalfFovy);
    result[2][2] = - (zFar + zNear) / (zFar - zNear);
    result[2][3] = - 1.f;
    result[3][2] = - (2.f * zFar * zNear) / (zFar - zNear);
    return result;
}

mat4 look_at(vec3 eye, vec3 center, vec3 up)
{
    vec3 f = vec3(normalize(center - eye));
    vec3 s = vec3(normalize(cross(f, up)));
    vec3 u = vec3(cross(s, f));

    mat4 result = mat4(1);
    result[0][0] = s.x;
    result[1][0] = s.y;
    result[2][0] = s.z;
    result[0][1] = u.x;
    result[1][1] = u.y;
    result[2][1] = u.z;
    result[0][2] =-f.x;
    result[1][2] =-f.y;
    result[2][2] =-f.z;
    result[3][0] =-dot(s, eye);
    result[3][1] =-dot(u, eye);
    result[3][2] = dot(f, eye);

    return result;
}

void main()
{
    uint face = gl_GlobalInvocationID.z;

    vec3 view_dir = vec3(0);
    vec3 view_up = vec3(0, 1, 0);
    if (face == 0)
    {
        view_dir = vec3(1, 0, 0);
    }
    else if (face == 1)
    {
        view_dir = vec3(-1, 0, 0); // back
    }
    else if (face == 2)
    {
        view_dir = vec3(0, -1, 0); // top
        view_up = vec3(0, 0, -1);
    }
    else if (face == 3)
    {
        view_dir = vec3(0, 1, 0); // bottom
        view_up = vec3(0, 0, 1);
    }
    else if (face == 4) // right
    {
        view_dir = vec3(0, 0, -1);
    }
    else if (face == 5) // left
    {
        view_dir = vec3(0, 0, 1);
    }

    const float resolution = imageSize(t_output).x;
    const vec2 inUV = (vec2(gl_GlobalInvocationID.xy + 0.5f) / resolution);
    vec2 d = inUV * 2.0 - 1.0;

    mat4 persp = perspective(1.5708f, resolution / resolution, 1.f, 100.f);
    mat4 view = look_at(vec3(0, 0, 0), view_dir, view_up);

    vec4 target = inverse(persp) * vec4(d.x, d.y, 1, 1) ;
    vec4 direction = inverse(view) * vec4(normalize(target.xyz), 0);

    vec2 uv = SampleSphericalMap(vec3(direction));

    vec3 rgb = texture(t_input, uv).rgb;
    imageStore(t_output, ivec3(gl_GlobalInvocationID), vec4(rgb, 1.0));
}
